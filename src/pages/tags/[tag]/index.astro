---
// import { getCollection } from "astro:content";
import { type CollectionEntry, getCollection } from "astro:content";
import TagPosts from "@components/TagPosts.astro";
// import getPostsByTag from "@utils/getPostsByTag";
// import getPagination from "@utils/getPagination";
// import getUniqueTags from "@utils/getUniqueTags";

// import type { CollectionEntry } from "astro:content";
// import getSortedPosts from "./getSortedPosts";
// import { slugifyAll } from "./slugify";

import Layout from "@layouts/Layout.astro";
// import Main from "@layouts/Main.astro";
import Header from "@components/Header.astro";
import Footer from "@components/Footer.astro";
// import Card from "@components/Card";
// import Pagination from "@components/Pagination.astro";
// import { SITE } from "@config";


interface Tag {
  tag: string;
  tagName: string;
}



export async function getStaticPaths() {
  const getUniqueTags = (posts: CollectionEntry<"blog">[]) => {
    const tags: Tag[] = posts
      // .filter(postFilter)
      .flatMap(post => post.data.tags)
      // .map(tag => ({ tag: slugifyStr(tag), tagName: tag }))
      .map(tag => ({ tag: tag, tagName: tag }))
      .filter(
        (value, index, self) =>
          self.findIndex(tag => tag.tag === value.tag) === index
      )
      .sort((tagA, tagB) => tagA.tag.localeCompare(tagB.tag));

    return tags;
  };

  const posts = await getCollection("blog");

  const tags = getUniqueTags(posts);

  return tags.map(({ tag, tagName }) => {
    return {
      params: { tag },
      props: { tag, tagName, posts },
    };
  });
}


const getSortedPosts = (posts: CollectionEntry<"blog">[]) => {
  return posts
    // .filter(postFilter)
    .sort(
      (a, b) =>
        Math.floor(
          new Date(b.data.modDatetime ?? b.data.pubDatetime).getTime() / 1000
        ) -
        Math.floor(
          new Date(a.data.modDatetime ?? a.data.pubDatetime).getTime() / 1000
        )
    );
};


const getPostsByTag = (posts: CollectionEntry<"blog">[], tag: string) =>
  getSortedPosts(
    // posts.filter(post => slugifyAll(post.data.tags).includes(tag))
    posts.filter(post => post.data.tags.includes(tag))
  );


const { tag, tagName, posts } = Astro.props;

const postsByTag = getPostsByTag(posts, tag);

const paginatedPosts = postsByTag;
// const pagination = getPagination({
//   posts: postsByTag,
//   page: 1,
//   isIndex: true,
// });
---

<!-- <TagPosts {...pagination} {tag} {tagName} /> -->

<Layout title={`Tag: ${tagName}`}>
  <Header activeNav="tags" />
  <!-- <Main
    pageTitle={[`Tag:`, `${tagName}`]}
    titleTransition={tag}
    pageDesc={`All the articles with the tag "${tagName}".`}
  > -->
  <main class="pt-10">
    <div class="content">
      <h2 class="remark">Tags</h2>
      <h1 slot="title" transition:name={tag}>{`Tag:${tag}`}</h1>
      <ul>
        {
          paginatedPosts.map(({ data, slug }) => {
            const headerProps = {
              // style: { viewTransitionName: slugifyStr(title) },
              style: { viewTransitionName: data.title },
              className: "text-lg font-medium decoration-dashed hover:underline",
            };

            // <Card href={`/posts/${slug}/`} frontmatter={data} />
            return (
              <li class="my-6">
                <a
                  href={`/posts/${slug}/`}
                  class="inline-block text-lg font-medium text-skin-accent decoration-dashed underline-offset-4 focus-visible:no-underline focus-visible:underline-offset-0"
                >
                    <h2 {...headerProps}>{data.title}</h2>

                </a>
                <p>{data.description}</p> 
              </li>
            ); }
          )
        }
      </ul>
    </div>
  </main>
  <!-- </Main> -->

  <!-- <Pagination
    {currentPage}
    {totalPages}
    prevUrl={`/tags/${tag}${
      currentPage - 1 !== 1 ? "/" + (currentPage - 1) : ""
    }/`}
    nextUrl={`/tags/${tag}/${currentPage + 1}/`}
  /> -->

  <Footer />
</Layout>
