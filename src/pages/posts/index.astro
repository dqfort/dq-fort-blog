---
import { type CollectionEntry, getCollection } from "astro:content";
// import getSortedPosts from "@utils/getSortedPosts";
// import getPagination from "@utils/getPagination";

import Layout from "@layouts/Layout.astro";
// import Main from "@layouts/Main.astro";
import Header from "@components/Header.astro";
import Footer from "@components/Footer.astro";
// import Pagination from "@components/Pagination.astro";
// import Card from "@components/Card";
// import { SITE } from "@config";

const posts = await getCollection("blog");

const getSortedPosts = (posts: CollectionEntry<"blog">[]) => {
  return posts
    // .filter(postFilter)
    .sort(
      (a, b) =>
        Math.floor(
          new Date(b.data.modDatetime ?? b.data.pubDatetime).getTime() / 1000
        ) -
        Math.floor(
          new Date(a.data.modDatetime ?? a.data.pubDatetime).getTime() / 1000
        )
    );
};


const sortedPosts = getSortedPosts(posts);
const paginatedPosts = sortedPosts;
// const pagination = getPagination({
//   posts: sortedPosts,
//   page: 1,
//   isIndex: true,
// });
---

<Layout title={`Posts`}>
  <Header activeNav="posts" />
  <main class="pt-10">
    <div class="content">
      <h2 class="remark">Posts</h2>
      <ul>
        {
          paginatedPosts.map(({ data, slug }) => {
            const headerProps = {
              style: { viewTransitionName: data.title },
              className: "text-lg font-medium decoration-dashed hover:underline",
            };
            return (
              <li class="my-6">
                <a
                  href={`/posts/${slug}/`}
                  class="inline-block text-lg font-medium text-skin-accent decoration-dashed underline-offset-4 focus-visible:no-underline focus-visible:underline-offset-0"
                >
                  <h3 {...headerProps}>{data.title}</h3>
                </a>
                <p>{data.description}</p>
              </li>
            )
          })
        }
      </ul>
    </div>
  </main>

    <!-- <Pagination
      {currentPage}
      {totalPages}
      prevUrl={`/posts${currentPage - 1 !== 1 ? "/" + (currentPage - 1) : ""}/`}
      nextUrl={`/posts/${currentPage + 1}/`}
    /> -->

  <Footer />
</Layout>
